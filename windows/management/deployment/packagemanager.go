// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package deployment

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/martytsaitw/winrt-go/windows/applicationmodel"
	"github.com/martytsaitw/winrt-go/windows/foundation"
	"github.com/martytsaitw/winrt-go/windows/foundation/collections"
)

const SignaturePackageManager string = "rc(Windows.Management.Deployment.PackageManager;{9a7d4b65-5e8f-4fc7-a2e5-7f6925cb8b53})"

type PackageManager struct {
	ole.IUnknown
}

func NewPackageManager() (*PackageManager, error) {
	inspectable, err := ole.RoActivateInstance("Windows.Management.Deployment.PackageManager")
	if err != nil {
		return nil, err
	}
	return (*PackageManager)(unsafe.Pointer(inspectable)), nil
}

func (impl *PackageManager) AddPackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.AddPackageAsync(packageUri, dependencyPackageUris, deploymentOptions)
}

func (impl *PackageManager) UpdatePackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.UpdatePackageAsync(packageUri, dependencyPackageUris, deploymentOptions)
}

func (impl *PackageManager) RemovePackageAsync(packageFullName string) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.RemovePackageAsync(packageFullName)
}

func (impl *PackageManager) StagePackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.StagePackageAsync(packageUri, dependencyPackageUris)
}

func (impl *PackageManager) RegisterPackageAsync(manifestUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.RegisterPackageAsync(manifestUri, dependencyPackageUris, deploymentOptions)
}

func (impl *PackageManager) FindPackages() (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackages()
}

func (impl *PackageManager) FindPackagesByUserSecurityId(userSecurityId string) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackagesByUserSecurityId(userSecurityId)
}

func (impl *PackageManager) FindPackagesByNamePublisher(packageName string, packagePublisher string) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackagesByNamePublisher(packageName, packagePublisher)
}

func (impl *PackageManager) FindPackagesByUserSecurityIdNamePublisher(userSecurityId string, packageName string, packagePublisher string) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackagesByUserSecurityIdNamePublisher(userSecurityId, packageName, packagePublisher)
}

func (impl *PackageManager) FindUsers(packageFullName string) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindUsers(packageFullName)
}

func (impl *PackageManager) SetPackageState(packageFullName string, packageState PackageState) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.SetPackageState(packageFullName, packageState)
}

func (impl *PackageManager) FindPackageByPackageFullName(packageFullName string) (*applicationmodel.Package, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackageByPackageFullName(packageFullName)
}

func (impl *PackageManager) CleanupPackageForUserAsync(packageName string, userSecurityId string) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.CleanupPackageForUserAsync(packageName, userSecurityId)
}

func (impl *PackageManager) FindPackagesByPackageFamilyName(packageFamilyName string) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackagesByPackageFamilyName(packageFamilyName)
}

func (impl *PackageManager) FindPackagesByUserSecurityIdPackageFamilyName(userSecurityId string, packageFamilyName string) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackagesByUserSecurityIdPackageFamilyName(userSecurityId, packageFamilyName)
}

func (impl *PackageManager) FindPackageByUserSecurityIdPackageFullName(userSecurityId string, packageFullName string) (*applicationmodel.Package, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager))
	defer itf.Release()
	v := (*iPackageManager)(unsafe.Pointer(itf))
	return v.FindPackageByUserSecurityIdPackageFullName(userSecurityId, packageFullName)
}

func (impl *PackageManager) RemovePackageWithOptionsAsync(packageFullName string, removalOptions RemovalOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.RemovePackageWithOptionsAsync(packageFullName, removalOptions)
}

func (impl *PackageManager) StagePackageWithOptionsAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.StagePackageWithOptionsAsync(packageUri, dependencyPackageUris, deploymentOptions)
}

func (impl *PackageManager) RegisterPackageByFullNameAsync(mainPackageFullName string, dependencyPackageFullNames *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.RegisterPackageByFullNameAsync(mainPackageFullName, dependencyPackageFullNames, deploymentOptions)
}

func (impl *PackageManager) FindPackagesWithPackageTypes(packageTypes PackageTypes) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.FindPackagesWithPackageTypes(packageTypes)
}

func (impl *PackageManager) FindPackagesByUserSecurityIdWithPackageTypes(userSecurityId string, packageTypes PackageTypes) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.FindPackagesByUserSecurityIdWithPackageTypes(userSecurityId, packageTypes)
}

func (impl *PackageManager) FindPackagesByNamePublisherWithPackageTypes(packageName string, packagePublisher string, packageTypes PackageTypes) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.FindPackagesByNamePublisherWithPackageTypes(packageName, packagePublisher, packageTypes)
}

func (impl *PackageManager) FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(userSecurityId string, packageName string, packagePublisher string, packageTypes PackageTypes) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(userSecurityId, packageName, packagePublisher, packageTypes)
}

func (impl *PackageManager) FindPackagesByPackageFamilyNameWithPackageTypes(packageFamilyName string, packageTypes PackageTypes) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.FindPackagesByPackageFamilyNameWithPackageTypes(packageFamilyName, packageTypes)
}

func (impl *PackageManager) FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(userSecurityId string, packageFamilyName string, packageTypes PackageTypes) (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(userSecurityId, packageFamilyName, packageTypes)
}

func (impl *PackageManager) StageUserDataAsync(packageFullName string) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager2))
	defer itf.Release()
	v := (*iPackageManager2)(unsafe.Pointer(itf))
	return v.StageUserDataAsync(packageFullName)
}

func (impl *PackageManager) AddPackageVolumeAsync(packageStorePath string) (*foundation.IAsyncOperation, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.AddPackageVolumeAsync(packageStorePath)
}

func (impl *PackageManager) AddPackageToVolumeAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.AddPackageToVolumeAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume)
}

func (impl *PackageManager) ClearPackageStatus(packageFullName string, status PackageStatus) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.ClearPackageStatus(packageFullName, status)
}

func (impl *PackageManager) RegisterPackageWithAppDataVolumeAsync(manifestUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, appDataVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.RegisterPackageWithAppDataVolumeAsync(manifestUri, dependencyPackageUris, deploymentOptions, appDataVolume)
}

func (impl *PackageManager) FindPackageVolumeByName(volumeName string) (*PackageVolume, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.FindPackageVolumeByName(volumeName)
}

func (impl *PackageManager) FindPackageVolumes() (*collections.IIterable, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.FindPackageVolumes()
}

func (impl *PackageManager) GetDefaultPackageVolume() (*PackageVolume, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.GetDefaultPackageVolume()
}

func (impl *PackageManager) MovePackageToVolumeAsync(packageFullName string, deploymentOptions DeploymentOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.MovePackageToVolumeAsync(packageFullName, deploymentOptions, targetVolume)
}

func (impl *PackageManager) RemovePackageVolumeAsync(volume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.RemovePackageVolumeAsync(volume)
}

func (impl *PackageManager) SetDefaultPackageVolume(volume *PackageVolume) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.SetDefaultPackageVolume(volume)
}

func (impl *PackageManager) SetPackageStatus(packageFullName string, status PackageStatus) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.SetPackageStatus(packageFullName, status)
}

func (impl *PackageManager) SetPackageVolumeOfflineAsync(packageVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.SetPackageVolumeOfflineAsync(packageVolume)
}

func (impl *PackageManager) SetPackageVolumeOnlineAsync(packageVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.SetPackageVolumeOnlineAsync(packageVolume)
}

func (impl *PackageManager) StagePackageToVolumeAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.StagePackageToVolumeAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume)
}

func (impl *PackageManager) StageUserDataWithOptionsAsync(packageFullName string, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager3))
	defer itf.Release()
	v := (*iPackageManager3)(unsafe.Pointer(itf))
	return v.StageUserDataWithOptionsAsync(packageFullName, deploymentOptions)
}

func (impl *PackageManager) GetPackageVolumesAsync() (*foundation.IAsyncOperation, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager4))
	defer itf.Release()
	v := (*iPackageManager4)(unsafe.Pointer(itf))
	return v.GetPackageVolumesAsync()
}

func (impl *PackageManager) AddPackageToVolumeAndOptionalPackagesAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, externalPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager5))
	defer itf.Release()
	v := (*iPackageManager5)(unsafe.Pointer(itf))
	return v.AddPackageToVolumeAndOptionalPackagesAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, externalPackageUris)
}

func (impl *PackageManager) StagePackageToVolumeAndOptionalPackagesAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, externalPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager5))
	defer itf.Release()
	v := (*iPackageManager5)(unsafe.Pointer(itf))
	return v.StagePackageToVolumeAndOptionalPackagesAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, externalPackageUris)
}

func (impl *PackageManager) RegisterPackageByFamilyNameAndOptionalPackagesAsync(mainPackageFamilyName string, dependencyPackageFamilyNames *collections.IIterable, deploymentOptions DeploymentOptions, appDataVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager5))
	defer itf.Release()
	v := (*iPackageManager5)(unsafe.Pointer(itf))
	return v.RegisterPackageByFamilyNameAndOptionalPackagesAsync(mainPackageFamilyName, dependencyPackageFamilyNames, deploymentOptions, appDataVolume, optionalPackageFamilyNames)
}

func (impl *PackageManager) GetDebugSettings() (*PackageManagerDebugSettings, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager5))
	defer itf.Release()
	v := (*iPackageManager5)(unsafe.Pointer(itf))
	return v.GetDebugSettings()
}

func (impl *PackageManager) ProvisionPackageForAllUsersAsync(packageFamilyName string) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager6))
	defer itf.Release()
	v := (*iPackageManager6)(unsafe.Pointer(itf))
	return v.ProvisionPackageForAllUsersAsync(packageFamilyName)
}

func (impl *PackageManager) AddPackageByAppInstallerFileAsync(appInstallerFileUri *foundation.Uri, options AddPackageByAppInstallerOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager6))
	defer itf.Release()
	v := (*iPackageManager6)(unsafe.Pointer(itf))
	return v.AddPackageByAppInstallerFileAsync(appInstallerFileUri, options, targetVolume)
}

func (impl *PackageManager) RequestAddPackageByAppInstallerFileAsync(appInstallerFileUri *foundation.Uri, options AddPackageByAppInstallerOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager6))
	defer itf.Release()
	v := (*iPackageManager6)(unsafe.Pointer(itf))
	return v.RequestAddPackageByAppInstallerFileAsync(appInstallerFileUri, options, targetVolume)
}

func (impl *PackageManager) AddPackageToVolumeAndRelatedSetAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, options DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, packageUrisToInstall *collections.IIterable, relatedPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager6))
	defer itf.Release()
	v := (*iPackageManager6)(unsafe.Pointer(itf))
	return v.AddPackageToVolumeAndRelatedSetAsync(packageUri, dependencyPackageUris, options, targetVolume, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris)
}

func (impl *PackageManager) StagePackageToVolumeAndRelatedSetAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, options DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, packageUrisToInstall *collections.IIterable, relatedPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager6))
	defer itf.Release()
	v := (*iPackageManager6)(unsafe.Pointer(itf))
	return v.StagePackageToVolumeAndRelatedSetAsync(packageUri, dependencyPackageUris, options, targetVolume, optionalPackageFamilyNames, packageUrisToInstall, relatedPackageUris)
}

func (impl *PackageManager) RequestAddPackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, relatedPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager6))
	defer itf.Release()
	v := (*iPackageManager6)(unsafe.Pointer(itf))
	return v.RequestAddPackageAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, relatedPackageUris)
}

func (impl *PackageManager) RequestAddPackageAndRelatedSetAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, relatedPackageUris *collections.IIterable, packageUrisToInstall *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager7))
	defer itf.Release()
	v := (*iPackageManager7)(unsafe.Pointer(itf))
	return v.RequestAddPackageAndRelatedSetAsync(packageUri, dependencyPackageUris, deploymentOptions, targetVolume, optionalPackageFamilyNames, relatedPackageUris, packageUrisToInstall)
}

func (impl *PackageManager) DeprovisionPackageForAllUsersAsync(packageFamilyName string) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager8))
	defer itf.Release()
	v := (*iPackageManager8)(unsafe.Pointer(itf))
	return v.DeprovisionPackageForAllUsersAsync(packageFamilyName)
}

func (impl *PackageManager) FindProvisionedPackages() (*collections.IVector, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.FindProvisionedPackages()
}

func (impl *PackageManager) AddPackageByUriAsync(packageUri *foundation.Uri, options *AddPackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.AddPackageByUriAsync(packageUri, options)
}

func (impl *PackageManager) StagePackageByUriAsync(packageUri *foundation.Uri, options *StagePackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.StagePackageByUriAsync(packageUri, options)
}

func (impl *PackageManager) RegisterPackageByUriAsync(manifestUri *foundation.Uri, options *RegisterPackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.RegisterPackageByUriAsync(manifestUri, options)
}

func (impl *PackageManager) RegisterPackagesByFullNameAsync(packageFullNames *collections.IIterable, options *RegisterPackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.RegisterPackagesByFullNameAsync(packageFullNames, options)
}

func (impl *PackageManager) SetPackageStubPreference(packageFamilyName string, useStub PackageStubPreference) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.SetPackageStubPreference(packageFamilyName, useStub)
}

func (impl *PackageManager) GetPackageStubPreference(packageFamilyName string) (PackageStubPreference, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiPackageManager9))
	defer itf.Release()
	v := (*iPackageManager9)(unsafe.Pointer(itf))
	return v.GetPackageStubPreference(packageFamilyName)
}

const GUIDiPackageManager string = "9a7d4b65-5e8f-4fc7-a2e5-7f6925cb8b53"
const SignatureiPackageManager string = "{9a7d4b65-5e8f-4fc7-a2e5-7f6925cb8b53}"

type iPackageManager struct {
	ole.IInspectable
}

type iPackageManagerVtbl struct {
	ole.IInspectableVtbl

	AddPackageAsync                               uintptr
	UpdatePackageAsync                            uintptr
	RemovePackageAsync                            uintptr
	StagePackageAsync                             uintptr
	RegisterPackageAsync                          uintptr
	FindPackages                                  uintptr
	FindPackagesByUserSecurityId                  uintptr
	FindPackagesByNamePublisher                   uintptr
	FindPackagesByUserSecurityIdNamePublisher     uintptr
	FindUsers                                     uintptr
	SetPackageState                               uintptr
	FindPackageByPackageFullName                  uintptr
	CleanupPackageForUserAsync                    uintptr
	FindPackagesByPackageFamilyName               uintptr
	FindPackagesByUserSecurityIdPackageFamilyName uintptr
	FindPackageByUserSecurityIdPackageFullName    uintptr
}

func (v *iPackageManager) VTable() *iPackageManagerVtbl {
	return (*iPackageManagerVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager) AddPackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(packageUri)),            // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) UpdatePackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().UpdatePackageAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(packageUri)),            // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) RemovePackageAsync(packageFullName string) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemovePackageAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageFullNameHStr),  // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) StagePackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StagePackageAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(packageUri)),            // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) RegisterPackageAsync(manifestUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RegisterPackageAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(manifestUri)),           // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackages() (*collections.IIterable, error) {
	var out *collections.IIterable
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackages,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackagesByUserSecurityId(userSecurityId string) (*collections.IIterable, error) {
	var out *collections.IIterable
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByUserSecurityId,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(userSecurityIdHStr),   // in string
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackagesByNamePublisher(packageName string, packagePublisher string) (*collections.IIterable, error) {
	var out *collections.IIterable
	packageNameHStr, err := ole.NewHString(packageName)
	if err != nil {
		return nil, err
	}
	packagePublisherHStr, err := ole.NewHString(packagePublisher)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByNamePublisher,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageNameHStr),      // in string
		uintptr(packagePublisherHStr), // in string
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackagesByUserSecurityIdNamePublisher(userSecurityId string, packageName string, packagePublisher string) (*collections.IIterable, error) {
	var out *collections.IIterable
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	packageNameHStr, err := ole.NewHString(packageName)
	if err != nil {
		return nil, err
	}
	packagePublisherHStr, err := ole.NewHString(packagePublisher)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByUserSecurityIdNamePublisher,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(userSecurityIdHStr),   // in string
		uintptr(packageNameHStr),      // in string
		uintptr(packagePublisherHStr), // in string
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindUsers(packageFullName string) (*collections.IIterable, error) {
	var out *collections.IIterable
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindUsers,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageFullNameHStr),  // in string
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) SetPackageState(packageFullName string, packageState PackageState) error {
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPackageState,
		uintptr(unsafe.Pointer(v)),   // this
		uintptr(packageFullNameHStr), // in string
		uintptr(packageState),        // in PackageState
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iPackageManager) FindPackageByPackageFullName(packageFullName string) (*applicationmodel.Package, error) {
	var out *applicationmodel.Package
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackageByPackageFullName,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageFullNameHStr),  // in string
		uintptr(unsafe.Pointer(&out)), // out applicationmodel.Package
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) CleanupPackageForUserAsync(packageName string, userSecurityId string) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageNameHStr, err := ole.NewHString(packageName)
	if err != nil {
		return nil, err
	}
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().CleanupPackageForUserAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageNameHStr),      // in string
		uintptr(userSecurityIdHStr),   // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackagesByPackageFamilyName(packageFamilyName string) (*collections.IIterable, error) {
	var out *collections.IIterable
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByPackageFamilyName,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(packageFamilyNameHStr), // in string
		uintptr(unsafe.Pointer(&out)),  // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackagesByUserSecurityIdPackageFamilyName(userSecurityId string, packageFamilyName string) (*collections.IIterable, error) {
	var out *collections.IIterable
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByUserSecurityIdPackageFamilyName,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(userSecurityIdHStr),    // in string
		uintptr(packageFamilyNameHStr), // in string
		uintptr(unsafe.Pointer(&out)),  // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager) FindPackageByUserSecurityIdPackageFullName(userSecurityId string, packageFullName string) (*applicationmodel.Package, error) {
	var out *applicationmodel.Package
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackageByUserSecurityIdPackageFullName,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(userSecurityIdHStr),   // in string
		uintptr(packageFullNameHStr),  // in string
		uintptr(unsafe.Pointer(&out)), // out applicationmodel.Package
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager2 string = "f7aad08d-0840-46f2-b5d8-cad47693a095"
const SignatureiPackageManager2 string = "{f7aad08d-0840-46f2-b5d8-cad47693a095}"

type iPackageManager2 struct {
	ole.IInspectable
}

type iPackageManager2Vtbl struct {
	ole.IInspectableVtbl

	RemovePackageWithOptionsAsync                                 uintptr
	StagePackageWithOptionsAsync                                  uintptr
	RegisterPackageByFullNameAsync                                uintptr
	FindPackagesWithPackageTypes                                  uintptr
	FindPackagesByUserSecurityIdWithPackageTypes                  uintptr
	FindPackagesByNamePublisherWithPackageTypes                   uintptr
	FindPackagesByUserSecurityIdNamePublisherWithPackageTypes     uintptr
	FindPackagesByPackageFamilyNameWithPackageTypes               uintptr
	FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes uintptr
	StageUserDataAsync                                            uintptr
}

func (v *iPackageManager2) VTable() *iPackageManager2Vtbl {
	return (*iPackageManager2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager2) RemovePackageWithOptionsAsync(packageFullName string, removalOptions RemovalOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemovePackageWithOptionsAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageFullNameHStr),  // in string
		uintptr(removalOptions),       // in RemovalOptions
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) StagePackageWithOptionsAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StagePackageWithOptionsAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(packageUri)),            // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) RegisterPackageByFullNameAsync(mainPackageFullName string, dependencyPackageFullNames *collections.IIterable, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	mainPackageFullNameHStr, err := ole.NewHString(mainPackageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RegisterPackageByFullNameAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(mainPackageFullNameHStr),                    // in string
		uintptr(unsafe.Pointer(dependencyPackageFullNames)), // in collections.IIterable
		uintptr(deploymentOptions),                          // in DeploymentOptions
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) FindPackagesWithPackageTypes(packageTypes PackageTypes) (*collections.IIterable, error) {
	var out *collections.IIterable
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesWithPackageTypes,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageTypes),         // in PackageTypes
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) FindPackagesByUserSecurityIdWithPackageTypes(userSecurityId string, packageTypes PackageTypes) (*collections.IIterable, error) {
	var out *collections.IIterable
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByUserSecurityIdWithPackageTypes,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(userSecurityIdHStr),   // in string
		uintptr(packageTypes),         // in PackageTypes
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) FindPackagesByNamePublisherWithPackageTypes(packageName string, packagePublisher string, packageTypes PackageTypes) (*collections.IIterable, error) {
	var out *collections.IIterable
	packageNameHStr, err := ole.NewHString(packageName)
	if err != nil {
		return nil, err
	}
	packagePublisherHStr, err := ole.NewHString(packagePublisher)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByNamePublisherWithPackageTypes,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageNameHStr),      // in string
		uintptr(packagePublisherHStr), // in string
		uintptr(packageTypes),         // in PackageTypes
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) FindPackagesByUserSecurityIdNamePublisherWithPackageTypes(userSecurityId string, packageName string, packagePublisher string, packageTypes PackageTypes) (*collections.IIterable, error) {
	var out *collections.IIterable
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	packageNameHStr, err := ole.NewHString(packageName)
	if err != nil {
		return nil, err
	}
	packagePublisherHStr, err := ole.NewHString(packagePublisher)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByUserSecurityIdNamePublisherWithPackageTypes,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(userSecurityIdHStr),   // in string
		uintptr(packageNameHStr),      // in string
		uintptr(packagePublisherHStr), // in string
		uintptr(packageTypes),         // in PackageTypes
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) FindPackagesByPackageFamilyNameWithPackageTypes(packageFamilyName string, packageTypes PackageTypes) (*collections.IIterable, error) {
	var out *collections.IIterable
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByPackageFamilyNameWithPackageTypes,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(packageFamilyNameHStr), // in string
		uintptr(packageTypes),          // in PackageTypes
		uintptr(unsafe.Pointer(&out)),  // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes(userSecurityId string, packageFamilyName string, packageTypes PackageTypes) (*collections.IIterable, error) {
	var out *collections.IIterable
	userSecurityIdHStr, err := ole.NewHString(userSecurityId)
	if err != nil {
		return nil, err
	}
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackagesByUserSecurityIdPackageFamilyNameWithPackageTypes,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(userSecurityIdHStr),    // in string
		uintptr(packageFamilyNameHStr), // in string
		uintptr(packageTypes),          // in PackageTypes
		uintptr(unsafe.Pointer(&out)),  // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager2) StageUserDataAsync(packageFullName string) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().StageUserDataAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageFullNameHStr),  // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager3 string = "daad9948-36f1-41a7-9188-bc263e0dcb72"
const SignatureiPackageManager3 string = "{daad9948-36f1-41a7-9188-bc263e0dcb72}"

type iPackageManager3 struct {
	ole.IInspectable
}

type iPackageManager3Vtbl struct {
	ole.IInspectableVtbl

	AddPackageVolumeAsync                 uintptr
	AddPackageToVolumeAsync               uintptr
	ClearPackageStatus                    uintptr
	RegisterPackageWithAppDataVolumeAsync uintptr
	FindPackageVolumeByName               uintptr
	FindPackageVolumes                    uintptr
	GetDefaultPackageVolume               uintptr
	MovePackageToVolumeAsync              uintptr
	RemovePackageVolumeAsync              uintptr
	SetDefaultPackageVolume               uintptr
	SetPackageStatus                      uintptr
	SetPackageVolumeOfflineAsync          uintptr
	SetPackageVolumeOnlineAsync           uintptr
	StagePackageToVolumeAsync             uintptr
	StageUserDataWithOptionsAsync         uintptr
}

func (v *iPackageManager3) VTable() *iPackageManager3Vtbl {
	return (*iPackageManager3Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager3) AddPackageVolumeAsync(packageStorePath string) (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	packageStorePathHStr, err := ole.NewHString(packageStorePath)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageVolumeAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageStorePathHStr), // in string
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) AddPackageToVolumeAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageToVolumeAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(packageUri)),            // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),          // in PackageVolume
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) ClearPackageStatus(packageFullName string, status PackageStatus) error {
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().ClearPackageStatus,
		uintptr(unsafe.Pointer(v)),   // this
		uintptr(packageFullNameHStr), // in string
		uintptr(status),              // in PackageStatus
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iPackageManager3) RegisterPackageWithAppDataVolumeAsync(manifestUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, appDataVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RegisterPackageWithAppDataVolumeAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(manifestUri)),           // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(appDataVolume)),         // in PackageVolume
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) FindPackageVolumeByName(volumeName string) (*PackageVolume, error) {
	var out *PackageVolume
	volumeNameHStr, err := ole.NewHString(volumeName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackageVolumeByName,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(volumeNameHStr),       // in string
		uintptr(unsafe.Pointer(&out)), // out PackageVolume
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) FindPackageVolumes() (*collections.IIterable, error) {
	var out *collections.IIterable
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindPackageVolumes,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IIterable
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) GetDefaultPackageVolume() (*PackageVolume, error) {
	var out *PackageVolume
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDefaultPackageVolume,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out PackageVolume
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) MovePackageToVolumeAsync(packageFullName string, deploymentOptions DeploymentOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().MovePackageToVolumeAsync,
		uintptr(unsafe.Pointer(v)),            // this
		uintptr(packageFullNameHStr),          // in string
		uintptr(deploymentOptions),            // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)), // in PackageVolume
		uintptr(unsafe.Pointer(&out)),         // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) RemovePackageVolumeAsync(volume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RemovePackageVolumeAsync,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(volume)), // in PackageVolume
		uintptr(unsafe.Pointer(&out)),   // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) SetDefaultPackageVolume(volume *PackageVolume) error {
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetDefaultPackageVolume,
		uintptr(unsafe.Pointer(v)),      // this
		uintptr(unsafe.Pointer(volume)), // in PackageVolume
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iPackageManager3) SetPackageStatus(packageFullName string, status PackageStatus) error {
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPackageStatus,
		uintptr(unsafe.Pointer(v)),   // this
		uintptr(packageFullNameHStr), // in string
		uintptr(status),              // in PackageStatus
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iPackageManager3) SetPackageVolumeOfflineAsync(packageVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPackageVolumeOfflineAsync,
		uintptr(unsafe.Pointer(v)),             // this
		uintptr(unsafe.Pointer(packageVolume)), // in PackageVolume
		uintptr(unsafe.Pointer(&out)),          // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) SetPackageVolumeOnlineAsync(packageVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPackageVolumeOnlineAsync,
		uintptr(unsafe.Pointer(v)),             // this
		uintptr(unsafe.Pointer(packageVolume)), // in PackageVolume
		uintptr(unsafe.Pointer(&out)),          // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) StagePackageToVolumeAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StagePackageToVolumeAsync,
		uintptr(unsafe.Pointer(v)),                     // this
		uintptr(unsafe.Pointer(packageUri)),            // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)), // in collections.IIterable
		uintptr(deploymentOptions),                     // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),          // in PackageVolume
		uintptr(unsafe.Pointer(&out)),                  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager3) StageUserDataWithOptionsAsync(packageFullName string, deploymentOptions DeploymentOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFullNameHStr, err := ole.NewHString(packageFullName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().StageUserDataWithOptionsAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(packageFullNameHStr),  // in string
		uintptr(deploymentOptions),    // in DeploymentOptions
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager4 string = "3c719963-bab6-46bf-8ff7-da4719230ae6"
const SignatureiPackageManager4 string = "{3c719963-bab6-46bf-8ff7-da4719230ae6}"

type iPackageManager4 struct {
	ole.IInspectable
}

type iPackageManager4Vtbl struct {
	ole.IInspectableVtbl

	GetPackageVolumesAsync uintptr
}

func (v *iPackageManager4) VTable() *iPackageManager4Vtbl {
	return (*iPackageManager4Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager4) GetPackageVolumesAsync() (*foundation.IAsyncOperation, error) {
	var out *foundation.IAsyncOperation
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPackageVolumesAsync,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out foundation.IAsyncOperation
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager5 string = "711f3117-1afd-4313-978c-9bb6e1b864a7"
const SignatureiPackageManager5 string = "{711f3117-1afd-4313-978c-9bb6e1b864a7}"

type iPackageManager5 struct {
	ole.IInspectable
}

type iPackageManager5Vtbl struct {
	ole.IInspectableVtbl

	AddPackageToVolumeAndOptionalPackagesAsync          uintptr
	StagePackageToVolumeAndOptionalPackagesAsync        uintptr
	RegisterPackageByFamilyNameAndOptionalPackagesAsync uintptr
	GetDebugSettings                                    uintptr
}

func (v *iPackageManager5) VTable() *iPackageManager5Vtbl {
	return (*iPackageManager5Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager5) AddPackageToVolumeAndOptionalPackagesAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, externalPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageToVolumeAndOptionalPackagesAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(unsafe.Pointer(packageUri)),                 // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)),      // in collections.IIterable
		uintptr(deploymentOptions),                          // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),               // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(externalPackageUris)),        // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager5) StagePackageToVolumeAndOptionalPackagesAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, externalPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StagePackageToVolumeAndOptionalPackagesAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(unsafe.Pointer(packageUri)),                 // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)),      // in collections.IIterable
		uintptr(deploymentOptions),                          // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),               // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(externalPackageUris)),        // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager5) RegisterPackageByFamilyNameAndOptionalPackagesAsync(mainPackageFamilyName string, dependencyPackageFamilyNames *collections.IIterable, deploymentOptions DeploymentOptions, appDataVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	mainPackageFamilyNameHStr, err := ole.NewHString(mainPackageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().RegisterPackageByFamilyNameAndOptionalPackagesAsync,
		uintptr(unsafe.Pointer(v)),                            // this
		uintptr(mainPackageFamilyNameHStr),                    // in string
		uintptr(unsafe.Pointer(dependencyPackageFamilyNames)), // in collections.IIterable
		uintptr(deploymentOptions),                            // in DeploymentOptions
		uintptr(unsafe.Pointer(appDataVolume)),                // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)),   // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                         // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager5) GetDebugSettings() (*PackageManagerDebugSettings, error) {
	var out *PackageManagerDebugSettings
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetDebugSettings,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out PackageManagerDebugSettings
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager6 string = "0847e909-53cd-4e4f-832e-57d180f6e447"
const SignatureiPackageManager6 string = "{0847e909-53cd-4e4f-832e-57d180f6e447}"

type iPackageManager6 struct {
	ole.IInspectable
}

type iPackageManager6Vtbl struct {
	ole.IInspectableVtbl

	ProvisionPackageForAllUsersAsync         uintptr
	AddPackageByAppInstallerFileAsync        uintptr
	RequestAddPackageByAppInstallerFileAsync uintptr
	AddPackageToVolumeAndRelatedSetAsync     uintptr
	StagePackageToVolumeAndRelatedSetAsync   uintptr
	RequestAddPackageAsync                   uintptr
}

func (v *iPackageManager6) VTable() *iPackageManager6Vtbl {
	return (*iPackageManager6Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager6) ProvisionPackageForAllUsersAsync(packageFamilyName string) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().ProvisionPackageForAllUsersAsync,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(packageFamilyNameHStr), // in string
		uintptr(unsafe.Pointer(&out)),  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager6) AddPackageByAppInstallerFileAsync(appInstallerFileUri *foundation.Uri, options AddPackageByAppInstallerOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageByAppInstallerFileAsync,
		uintptr(unsafe.Pointer(v)),                   // this
		uintptr(unsafe.Pointer(appInstallerFileUri)), // in foundation.Uri
		uintptr(options),                             // in AddPackageByAppInstallerOptions
		uintptr(unsafe.Pointer(targetVolume)),        // in PackageVolume
		uintptr(unsafe.Pointer(&out)),                // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager6) RequestAddPackageByAppInstallerFileAsync(appInstallerFileUri *foundation.Uri, options AddPackageByAppInstallerOptions, targetVolume *PackageVolume) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RequestAddPackageByAppInstallerFileAsync,
		uintptr(unsafe.Pointer(v)),                   // this
		uintptr(unsafe.Pointer(appInstallerFileUri)), // in foundation.Uri
		uintptr(options),                             // in AddPackageByAppInstallerOptions
		uintptr(unsafe.Pointer(targetVolume)),        // in PackageVolume
		uintptr(unsafe.Pointer(&out)),                // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager6) AddPackageToVolumeAndRelatedSetAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, options DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, packageUrisToInstall *collections.IIterable, relatedPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageToVolumeAndRelatedSetAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(unsafe.Pointer(packageUri)),                 // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)),      // in collections.IIterable
		uintptr(options),                                    // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),               // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(packageUrisToInstall)),       // in collections.IIterable
		uintptr(unsafe.Pointer(relatedPackageUris)),         // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager6) StagePackageToVolumeAndRelatedSetAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, options DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, packageUrisToInstall *collections.IIterable, relatedPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StagePackageToVolumeAndRelatedSetAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(unsafe.Pointer(packageUri)),                 // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)),      // in collections.IIterable
		uintptr(options),                                    // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),               // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(packageUrisToInstall)),       // in collections.IIterable
		uintptr(unsafe.Pointer(relatedPackageUris)),         // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager6) RequestAddPackageAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, relatedPackageUris *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RequestAddPackageAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(unsafe.Pointer(packageUri)),                 // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)),      // in collections.IIterable
		uintptr(deploymentOptions),                          // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),               // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(relatedPackageUris)),         // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager7 string = "f28654f4-2ba7-4b80-88d6-be15f9a23fba"
const SignatureiPackageManager7 string = "{f28654f4-2ba7-4b80-88d6-be15f9a23fba}"

type iPackageManager7 struct {
	ole.IInspectable
}

type iPackageManager7Vtbl struct {
	ole.IInspectableVtbl

	RequestAddPackageAndRelatedSetAsync uintptr
}

func (v *iPackageManager7) VTable() *iPackageManager7Vtbl {
	return (*iPackageManager7Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager7) RequestAddPackageAndRelatedSetAsync(packageUri *foundation.Uri, dependencyPackageUris *collections.IIterable, deploymentOptions DeploymentOptions, targetVolume *PackageVolume, optionalPackageFamilyNames *collections.IIterable, relatedPackageUris *collections.IIterable, packageUrisToInstall *collections.IIterable) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RequestAddPackageAndRelatedSetAsync,
		uintptr(unsafe.Pointer(v)),                          // this
		uintptr(unsafe.Pointer(packageUri)),                 // in foundation.Uri
		uintptr(unsafe.Pointer(dependencyPackageUris)),      // in collections.IIterable
		uintptr(deploymentOptions),                          // in DeploymentOptions
		uintptr(unsafe.Pointer(targetVolume)),               // in PackageVolume
		uintptr(unsafe.Pointer(optionalPackageFamilyNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(relatedPackageUris)),         // in collections.IIterable
		uintptr(unsafe.Pointer(packageUrisToInstall)),       // in collections.IIterable
		uintptr(unsafe.Pointer(&out)),                       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager8 string = "b8575330-1298-4ee2-80ee-7f659c5d2782"
const SignatureiPackageManager8 string = "{b8575330-1298-4ee2-80ee-7f659c5d2782}"

type iPackageManager8 struct {
	ole.IInspectable
}

type iPackageManager8Vtbl struct {
	ole.IInspectableVtbl

	DeprovisionPackageForAllUsersAsync uintptr
}

func (v *iPackageManager8) VTable() *iPackageManager8Vtbl {
	return (*iPackageManager8Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager8) DeprovisionPackageForAllUsersAsync(packageFamilyName string) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return nil, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().DeprovisionPackageForAllUsersAsync,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(packageFamilyNameHStr), // in string
		uintptr(unsafe.Pointer(&out)),  // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

const GUIDiPackageManager9 string = "1aa79035-cc71-4b2e-80a6-c7041d8579a7"
const SignatureiPackageManager9 string = "{1aa79035-cc71-4b2e-80a6-c7041d8579a7}"

type iPackageManager9 struct {
	ole.IInspectable
}

type iPackageManager9Vtbl struct {
	ole.IInspectableVtbl

	FindProvisionedPackages         uintptr
	AddPackageByUriAsync            uintptr
	StagePackageByUriAsync          uintptr
	RegisterPackageByUriAsync       uintptr
	RegisterPackagesByFullNameAsync uintptr
	SetPackageStubPreference        uintptr
	GetPackageStubPreference        uintptr
}

func (v *iPackageManager9) VTable() *iPackageManager9Vtbl {
	return (*iPackageManager9Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iPackageManager9) FindProvisionedPackages() (*collections.IVector, error) {
	var out *collections.IVector
	hr, _, _ := syscall.SyscallN(
		v.VTable().FindProvisionedPackages,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVector
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager9) AddPackageByUriAsync(packageUri *foundation.Uri, options *AddPackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().AddPackageByUriAsync,
		uintptr(unsafe.Pointer(v)),          // this
		uintptr(unsafe.Pointer(packageUri)), // in foundation.Uri
		uintptr(unsafe.Pointer(options)),    // in AddPackageOptions
		uintptr(unsafe.Pointer(&out)),       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager9) StagePackageByUriAsync(packageUri *foundation.Uri, options *StagePackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().StagePackageByUriAsync,
		uintptr(unsafe.Pointer(v)),          // this
		uintptr(unsafe.Pointer(packageUri)), // in foundation.Uri
		uintptr(unsafe.Pointer(options)),    // in StagePackageOptions
		uintptr(unsafe.Pointer(&out)),       // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager9) RegisterPackageByUriAsync(manifestUri *foundation.Uri, options *RegisterPackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RegisterPackageByUriAsync,
		uintptr(unsafe.Pointer(v)),           // this
		uintptr(unsafe.Pointer(manifestUri)), // in foundation.Uri
		uintptr(unsafe.Pointer(options)),     // in RegisterPackageOptions
		uintptr(unsafe.Pointer(&out)),        // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager9) RegisterPackagesByFullNameAsync(packageFullNames *collections.IIterable, options *RegisterPackageOptions) (*foundation.IAsyncOperationWithProgress, error) {
	var out *foundation.IAsyncOperationWithProgress
	hr, _, _ := syscall.SyscallN(
		v.VTable().RegisterPackagesByFullNameAsync,
		uintptr(unsafe.Pointer(v)),                // this
		uintptr(unsafe.Pointer(packageFullNames)), // in collections.IIterable
		uintptr(unsafe.Pointer(options)),          // in RegisterPackageOptions
		uintptr(unsafe.Pointer(&out)),             // out foundation.IAsyncOperationWithProgress
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}

func (v *iPackageManager9) SetPackageStubPreference(packageFamilyName string, useStub PackageStubPreference) error {
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetPackageStubPreference,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(packageFamilyNameHStr), // in string
		uintptr(useStub),               // in PackageStubPreference
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iPackageManager9) GetPackageStubPreference(packageFamilyName string) (PackageStubPreference, error) {
	var out PackageStubPreference
	packageFamilyNameHStr, err := ole.NewHString(packageFamilyName)
	if err != nil {
		return PackageStubPreferenceFull, err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetPackageStubPreference,
		uintptr(unsafe.Pointer(v)),     // this
		uintptr(packageFamilyNameHStr), // in string
		uintptr(unsafe.Pointer(&out)),  // out PackageStubPreference
	)

	if hr != 0 {
		return PackageStubPreferenceFull, ole.NewError(hr)
	}

	return out, nil
}
